#!/usr/bin/env node

const fetch = require('node-fetch');
const { connect } = require('mongoose');
require('dotenv').config();

const Event = require('../models/event.model');

class HTTPResponseError extends Error {
  constructor(res, ...args) {
    super(`HTTP Error Response: ${res.status} ${res.statusText}`, ...args);
    this.response = res;
  }
}

const checkStatus = response => {
  if (response.ok) return response;
  throw new HTTPResponseError(response);
};

const storeIfNotExists = async event =>
  Event.findOneAndUpdate(
    event,
    { $setOnInsert: event },
    { upsert: true, new: true }
  ).exec();

(async () => {
  /**
   * Connect to MongoDB instance
   */

  await connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useFindAndModify: false,
    useCreateIndex: true,
    useUnifiedTopology: true
  });

  /**
   * Fetch data from CLIST and store in MongoDB
   */

  const clistURL = new URL('https://clist.by/api/v1/contest/');

  clistURL.search = new URLSearchParams({
    limit: 1024,
    start__gt: new Date().toISOString()
  });

  const clistRes = await fetch(clistURL, {
    headers: { Authorization: process.env.CLIST_BEARER }
  });

  checkStatus(clistRes);
  const clistJSON = await clistRes.json();

  await Promise.all(
    clistJSON.objects
      .filter(({ event }) => /^[ -~]+$/.test(event))
      .map(e => ({
        title: e.event,
        host: e.resource.name,
        url: e.href,
        start: e.start,
        end: e.end
      }))
      .map(storeIfNotExists)
  );

  /**
   * Fetch data from Devfolio and store in MongoDB
   */

  const devfolioURL = new URL('https://devfolio.co/api/hackathons');

  devfolioURL.search = new URLSearchParams({
    filter: 'all',
    page: 1,
    limit: 20
  });

  const devfolioRes = await fetch(devfolioURL);
  checkStatus(devfolioRes);
  const devfolioJSON = await devfolioRes.json();

  await Promise.all(
    devfolioJSON.result
      .filter(({ starts_at }) => starts_at > new Date().toISOString())
      .reduce(
        (r, e) =>
          r.push(
            {
              title: `${e.name} - Apply Now`,
              host: 'devfolio.co',
              url: e.hackathon_setting.site,
              start: e.hackathon_setting.reg_starts_at,
              end: e.hackathon_setting.reg_ends_at
            },
            {
              title: `${e.name} - Participate`,
              host: 'devfolio.co',
              url: e.hackathon_setting.site,
              start: e.starts_at,
              end: e.ends_at
            }
          ) && r,
        []
      )
      .map(storeIfNotExists)
  );

  process.exit();
})().catch(err => {
  console.error(err);
  process.exit(1);
});
